FROM node:22-alpine AS base

# The Dockerfile is copy-pasted into our main docs at /docs/handbook/deploying-with-docker.
# Make sure you update this Dockerfile, the Dockerfile in the web workspace and copy that over to Dockerfile in the docs.

FROM base AS builder
# Install system dependencies
RUN apk update
RUN apk add --no-cache libc6-compat

# ✅ Install pnpm and manually configure PNPM_HOME
ENV PNPM_HOME="/root/.local/share/pnpm"
ENV PATH="$PNPM_HOME:$PATH"

RUN npm install -g pnpm \
  && pnpm config set global-bin-dir "$PNPM_HOME" \
  && pnpm add -g turbo

# Set working directory
WORKDIR /app
RUN pnpm add -g turbo
COPY . .
RUN turbo prune api --docker

# Add lockfile and package.json's of isolated subworkspace
FROM base AS installer
RUN apk update && apk add --no-cache libc6-compat openssl ca-certificates curl

# ✅ Install pnpm and manually configure PNPM_HOME
ENV PNPM_HOME="/root/.local/share/pnpm"
ENV PATH="$PNPM_HOME:$PATH"

RUN npm install -g pnpm \
  && pnpm config set global-bin-dir "$PNPM_HOME" \
  && pnpm add -g turbo
  
WORKDIR /app

# First install dependencies (as they change less often)
COPY --from=builder /app/out/json/ .
RUN pnpm install --ignore-scripts

# Build the project and its dependencies
COPY --from=builder /app/out/full/ .

# Generate Prisma client
RUN pnpm --filter @workspace/db db:generate

# Uncomment and use build args to enable remote caching  
# ARG TURBO_TEAM
# ENV TURBO_TEAM=$TURBO_TEAM  

# ARG TURBO_TOKEN
# ENV TURBO_TOKEN=$TURBO_TOKEN
RUN pnpm turbo build

FROM base AS runner
WORKDIR /app

# Don't run production as root
RUN addgroup --system --gid 1001 expressjs
RUN adduser --system --uid 1001 expressjs
USER expressjs
COPY --from=installer /app .

CMD ["node", "apps/api/dist/index.js"]
